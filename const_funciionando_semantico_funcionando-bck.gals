#Options
GenerateScanner = true
GenerateParser = true
Language = Java
ScannerName = Lexico
ParserName = Sintatico
SemanticName = Semantico
ScannerCaseSensitive = true
ScannerTable = Compact
Input = Stream
Parser = LL
#RegularDefinitions
L : [A-Za-z]
D : [0-9]
E : (E|e)(\+|\-)?{D}{D}+

#Tokens
id: ( @ ( {L} | {D}) | {L} ) ( ( @ | _ )? ( {L} | {D} ) )* | ( {L} ( {L} | {D}) | {L} ) ( ( @ | _ )? ( {L} | {D} ) )*
programa = id : "programa"
var = id : "var"
caracter = id : "caracter"
cadeia = id : "cadeia"
procedimento = id : "procedimento"
inicio = id : "inicio"
fim = id : "fim"
inteiro = id : "inteiro"
booleano = id : "booleano"
funcao = id : "funcao"
se = id : "se"
entao = id : "entao"
senao = id : "senao"
leia = id : "leia"
escreva = id : "escreva"
ou = id : "ou"
e = id : "e"
nao = id : "nao"
falso = id : "falso"
verdadeiro = id : "verdadeiro"
de = id : "de"
faca = id : "faca"
real = id : "real"
vetor = id : "vetor"
enquanto = id : "enquanto"


//verificar se é isso mesmo
metodo = id : "metodo"
ref = id : "ref"
val = id : "val"
retorne = id : "retorne"
div = id : "div"

"{"
"}"
">="					
: [\r\n\s\t]*		//espaços em branco
num_int: {D}+ {E}?
num_real : ({D}+\.{D}* | \.{D}+) {E}?
literal : '([^'])*' //conferir
: #.* //comentario linha	
: /\*([^\*/]|/|\*|/\*)*\*/ //comentario bloco

//simbolos especiais Simples
";" 
"," 
"." 
">" 
"<" 
"=" 
"(" 
")" 
"[" 
"]" 
"+" 
"-" 
"*" 
"/" 
":"
//Simbolos especiais duplos
":=" 
".." 
"<>" 
"<="



#NonTerminals
<programa>
<bloco>
<dcl_var_const>
<tipo>
<dimensao>
<lid>
<rep_lid>
<fator_const>
<dcl_metodos>
<dcl_metodo>
<par_formais>
<rep_par>
<tipo_metodo>
<mp_par>
<com_composto>
<replistacomando>
<comando>
<senaoparte>
<rcomid>
<lista_expr>
<rep_lexpr>
<expressao>
<resto_expressao>
<oprel>
<expsimp>
<rep_expsimp>
<op_add>
<termo>
<rep_termo>
<op_mult>
<fator>
<rvar>
<constante>
<constante_explicita>
#Grammar
<programa>        ::= programa id  #101 ";"  <bloco> "." ;
<bloco>           ::= <dcl_var_const>  <dcl_metodos>  <com_composto>  ;		 	
<dcl_var_const>   ::= <tipo> <dimensao> #102 <lid> #103 <fator_const> #104 ";" <dcl_var_const> | î ;
<tipo>            ::= inteiro #105 | real #106 | booleano #107 | caracter #108 |cadeia "[" <constante> #109 "]";
<dimensao>        ::= #110 "[" <constante> #111 "]" | #112 î ;
<lid>             ::= id #113 <rep_lid>  ;
<rep_lid>         ::= ","  <lid> | î ;
<fator_const>     ::= #114 "="  <constante>  #115 | #116   î ;
<dcl_metodos>     ::= <dcl_metodo>  ";"  <dcl_metodos>  |  î ;
<dcl_metodo>      ::= metodo id #117 <par_formais> #118 <tipo_metodo> #119 ";" <bloco> #120;                 
<par_formais>     ::= "(" <mp_par> #121 <lid> #122 ":" <tipo> #123 <rep_par> ")" | î ;                      
<rep_par>         ::= ";" <mp_par> #121 <lid> #122 ":" <tipo> #123 <rep_par>  |  î ;
<tipo_metodo>     ::= ":" <tipo> #124 | #125 î ;
<mp_par>          ::= ref  #126 | #127 val ;
<com_composto>    ::= "{" <comando><replistacomando> "}";                             
<replistacomando> ::= ";" <comando><replistacomando> | î;
<comando>         ::= id #128 <rcomid>
                  | <com_composto>                                 
                  | se <expressao> #129 entao <comando><senaoparte> 
                  | enquanto <expressao> #129 faca <comando>                               
                  | leia "(" #130 <lid> ")"                                    
                  | escreva "(" #131 <lista_expr> ")"  
                  | retorne <expressao> #132
	                | î ;
<senaoparte>      ::= senao <comando>  |  î ;
<rcomid>          ::= #133 ":=" <expressao> #134 | "[" #135 <expressao> #136 "]" ":=" <expressao> #134 | "(" #137 #138 <lista_expr> ")" #139 | î #140;
<lista_expr>      ::= <expressao> #141 <rep_lexpr> ;
<rep_lexpr>       ::= "," <expressao> #141 <rep_lexpr> #143 |  î ;
<expressao>       ::= <expsimp> #142 <resto_expressao> ;
<resto_expressao> ::= <oprel> <expsimp> |  î ;
<oprel>           ::= "=" #144 | "<" #145 | ">" #146 | ">=" #147 | "<=" #148 | "<>" #149 ;
<expsimp>         ::= <termo> #150 <rep_expsimp> ;
<rep_expsimp>     ::= <op_add> #151 <termo> #152 <rep_expsimp>  |  î ;
<op_add>          ::= "+" #153 | "-" #154 | ou ;
<termo>           ::= <fator> #156 <rep_termo> ;
<rep_termo>       ::= <op_mult> #157 <fator> #158 <rep_termo> |  î ;
<op_mult>         ::= "*" #159 | "/" #160 |  e #161 |  div #162 ;
<fator>           ::= nao #163 <fator> #164 | "-" #165 <fator> #166 | "(" #167 <expressao> ")" #168 |  id #128 <rvar> #169 | <constante_explicita> #170;
<rvar>            ::= "(" #171 <expressao> #141 <rep_lexpr> ")" #172 | "[" #135 <expressao> #173 "]" |  î #174;
<constante>       ::= id #175 |  <constante_explicita> ;
<constante_explicita> ::=   num_int #176 |  num_real #177 |  falso #178 |  verdadeiro #179 | literal #180;

