#Options
GenerateScanner = true
GenerateParser = true
Language = Java
ScannerName = Lexico
ParserName = Sintatico
SemanticName = Semantico
ScannerCaseSensitive = true
ScannerTable = Compact
Input = Stream
Parser = LL
#RegularDefinitions
L : [A-Za-z]
D : [0-9]
E : (E|e)(\+|\-)?{D}{D}+

#Tokens
id: {L}( ({L} | {D}) | @({L} | {D}) | _({L} | {D}) )* | (@( ({L} | {D})+ ( (@ | _)({L} | {D}) )? ) )*


programa = id : "programa"
var = id : "var"
caracter = id : "caracter"
cadeia = id : "cadeia"
procedimento = id : "procedimento"
inicio = id : "inicio"
fim = id : "fim"
inteiro = id : "inteiro"
booleano = id : "booleano"
funcao = id : "funcao"
se = id : "se"
entao = id : "entao"
senao = id : "senao"
leia = id : "leia"
escreva = id : "escreva"
ou = id : "ou"
e = id : "e"
nao = id : "nao"
falso = id : "falso"
verdadeiro = id : "verdadeiro"
de = id : "de"
faca = id : "faca"
real = id : "real"
vetor = id : "vetor"
enquanto = id : "enquanto"

//verificar se é isso mesmo
metodo = id : "metodo"
ref = id : "ref"
val = id : "val"
retorne = id : "retorne"
div = id : "div"
literal = id : "literal"
"{"
"}"
">="
					


: [\r\n\s\t]*		//espaços em branco
num_int: (\+ | \-)? {D}+ {E}?
num_real : ({D}+\.{D}* | \.{D}+) {E}?
literal : '(''|[^'])*' //conferir
: #.* //comentario linha	
: /\*([^\*/]|/|\*|/\*)*\*/ //comentario bloco

//simbolos especiais Simples
";" 
"," 
"." 
">" 
"<" 
"=" 
"(" 
")" 
"[" 
"]" 
"+" 
"-" 
"*" 
"/" 
":"
//Simbolos especiais duplos
":=" 
".." 
"<>" 
"<="



#NonTerminals
<programa>
<bloco>
<dcl_var_const>
<tipo>
<dimensao>
<lid>
<rep_lid>
<fator_const>
<dcl_metodos>
<dcl_metodo>
<par_formais>
<rep_par>
<tipo_metodo>
<mp_par>
<com_composto>
<replistacomando>
<comando>
<senaoparte>
<rcomid>
<lista_expr>
<rep_lexpr>
<expressao>
<resto_expressao>
<oprel>
<expsimp>
<rep_expsimp>
<op_add>
<termo>
<rep_termo>
<op_mult>
<fator>
<rvar>
<constante>
<constante_explicita>
#Grammar
<programa> ::= programa id  ";"  <bloco> "." ;

<bloco> ::= <dcl_var_const>  <dcl_metodos>  <com_composto>  ;		 	
 
<dcl_var_const> ::= <tipo> <dimensao> #102 <lid> #103 <fator_const> #104 ";" <dcl_var_const> | î ;

<tipo> ::= inteiro #105 | real #106 | booleano #107 | caracter #108 |cadeia "[" <constante> #109 "]";

<dimensao> ::= #110 "[" <constante> #111 "]" | #112 î ;

<lid> ::= id  <rep_lid>  ;

<rep_lid> ::= ","  <lid> | î ;

<fator_const> ::=   "="  <constante>  |   î ;

<dcl_metodos> ::= <dcl_metodo>  ";"  <dcl_metodos>  |  î ;

<dcl_metodo> ::= metodo id   <par_formais>    <tipo_metodo> ";"   <bloco>  ;                 

<par_formais> ::= "(" <mp_par> <lid> ":" <tipo> <rep_par> ")" | î ;                      

<rep_par> ::= ";" <mp_par>  <lid>  ":"  <tipo>  <rep_par>  |  î ;

<tipo_metodo> ::=   ":"  <tipo>  | î ;

<mp_par>  ::= ref  |  val ;

<com_composto>  ::= "{"   <comando>  <replistacomando>  "}"  ;                             

<replistacomando> ::=   ";"  <comando>  <replistacomando>  |  î ;
<comando> ::= id #128 <rcomid>
             |  <com_composto>                                 
             | se <expressao> #129 entao <comando> <senaoparte> 
             | enquanto <expressao> #129 faca <comando>                               
             | leia "(" #130 <lid> ")"                                    
             | escreva "(" #131 <lista_expr> ")"  
             | retorne  <expressao> #132
	    |  î ;


<senaoparte> ::= senao  <comando>  |  î ;

<rcomid> ::= ":=" <expressao> 
                   |   "[" <expressao> "]" ":=" <expressao> 
                   |   "(" <lista_expr> ")" 
                   |   î ;
<lista_expr>  ::=  <expressao> <rep_lexpr> ;

<rep_lexpr>  ::= "," <expressao> <rep_lexpr> |  î ;

<expressao>  ::= <expsimp> <resto_expressao> ;

<resto_expressao> ::= <oprel> <expsimp> |  î ;

<oprel> ::= "=" | "<" | ">" | ">=" | "<=" | "<>" ;

<expsimp> ::= <termo> <rep_expsimp> ;

<rep_expsimp> ::= <op_add> <termo> <rep_expsimp>  |  î ;
                      
<op_add> ::= "+" | "-" | ou ;

<termo> ::= <fator> <rep_termo> ;

<rep_termo> ::= <op_mult> <fator> <rep_termo> |  î ;

<op_mult> ::= "*" | "/" |  div |  e ;

<fator> ::= nao <fator> 
               | "-"  <fator>
               |  "(" <expressao> ")" 
	     |  id  <rvar>   
	     | <constante_explicita> ;

<rvar> ::= "(" <expressao> <rep_lexpr> ")"  
              |   "[" <expressao>  "]"
              |   î ;

<constante> ::= id  |  <constante_explicita> ;
  
<constante_explicita>::=   num_int  |  num_real 
                     |  falso  |  verdadeiro  |  literal ;

